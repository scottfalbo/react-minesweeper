{"version":3,"sources":["components/Context/index.js","components/Header.js","components/MineTracker.js","components/Timer.js","components/InfoBoard.js","components/BoardCell.js","components/BoardRow.js","components/GameBoard.js","components/Options.js","components/Controls.js","App.js","index.js"],"names":["Minesweeper","React","createContext","Provider","getSpecs","localStorage","getItem","split","map","val","parseInt","specs","state","boardY","boardX","mines","minesStatic","firstTurn","controlsSwitch","optionsSwitch","timerStart","setState","timerStop","optionsToggle","event","preventDefault","controlsToggle","createMines","quantity","limit","mineArray","i","getNum","randomNumber","includes","push","Math","floor","random","counter","gameCell","boardArray","Array","apply","y","yi","x","xi","goBoom","forEach","key","toString","clicked","cellY","cellX","danger","view","highlight","isOnBoard","checkAround","returnArray","a","b","row","cell","filter","length","mineTracker","change","prev","value","this","timerControls","menuButtons","board","props","children","Component","Consumer","Header","onClick","MineTracker","className","Timer","counting","elapsed","lastTime","ticker","turnTimerOff","turnTimerOn","intervalId","setInterval","clearInterval","time","InfoBoard","window","location","reload","BoardCell","clicks","cellNumberColor","onMouseUp","shiftKey","shiftClick","button","rightClick","leftClick","onMouseDown","shiftHighlight","onMouseLeave","leaveHighlight","src","cellImage","alt","BoardRow","GameBoard","disableContextMenu","boom","safe","kaboom","exposeBlanks","winner","checkWin","totalFlags","adjacent","flag","adj","lose","higherState","checkAgain","recur","reader","onContextMenu","Options","difficulty","handleSubmit","setItem","handleChange","target","onSubmit","type","checked","onChange","Controls","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8e924bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst Minesweeper = React.createContext();\n\nexport class Provider extends Component {\n\n  //Load saved board size options from local storage if, else beginner\n  getSpecs = () => {\n    if (localStorage.getItem('specs')) {\n      let specs = (localStorage.getItem('specs')).split(',');\n      return specs.map(val => parseInt(val));\n    } else {\n      return [9, 9, 10];\n    }\n  }\n  specs = this.getSpecs();\n\n  state = {\n    boardY: this.specs[0],\n    boardX: this.specs[1],\n    mines: this.specs[2],\n    minesStatic: this.specs[2],\n    firstTurn: true,\n    controlsSwitch: false,\n    optionsSwitch: false\n  };\n\n  // Timer controls, start/stop/reset\n  timerStart = () => {\n    if (this.state.firstTurn) {\n      this.setState({ firstTurn: false });\n    }\n  }\n  timerStop = () => {\n    this.setState({ firstTurn: true });\n  }\n\n  // Menu buttons for toggling display on and off\n  optionsToggle = (event) => {\n    event.preventDefault();\n    if (this.state.controlsSwitch) { this.controlsSwitch = false; }\n    this.setState({\n      optionsSwitch: !this.state.optionsSwitch,\n      controlsSwitch: this.controlsSwitch\n    });\n  }\n  controlsToggle = (event) => {\n    event.preventDefault();\n    if (this.state.optionsSwitch) { this.optionsSwitch = false; }\n    this.setState({\n      controlsSwitch: !this.state.controlsSwitch,\n      optionsSwitch: this.optionsSwitch\n    });\n  }\n\n  // Create the game board\n  // Build an array of mine locations based on game difficulty\n  createMines = (quantity, limit) => {\n    const mineArray = [];\n    for (let i = 0; i < quantity; i++) {\n      let getNum = this.randomNumber(limit);\n      while (mineArray.includes(getNum)) {\n        getNum = this.randomNumber(limit);\n      }\n      mineArray.push(getNum);\n    }\n    return mineArray;\n  }\n  randomNumber = (limit) => Math.floor((Math.random() * limit) + 1);\n\n  // Build the board and create each cell object\n  mineArray = this.createMines(this.state.mines, this.state.boardX * this.state.boardY);\n  counter = 0;\n  gameCell = {};\n  boardArray = Array.apply(null, Array(this.state.boardY))\n    .map((y, yi) => Array.apply(null, Array(this.state.boardX))\n      .map((x, xi) => {\n        this.counter++;\n        let goBoom = false;\n        this.mineArray.forEach(key => {\n          if (key === this.counter) {\n            goBoom = true;\n          }\n        });\n        return this.gameCell = {\n          key: this.counter.toString(),\n          clicked: false,\n          cellY: yi,\n          cellX: xi,\n          goBoom: goBoom,\n          danger: 0,\n          view: '.',\n          highlight: false\n        }\n      }));\n\n  // Function to make sure a cells cords are within the array matrix\n  isOnBoard = (y, x) => {\n    if (y >= 0 && y < this.state.boardY && x >= 0 && x < this.state.boardX) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Takes in a cell's cords and returns an array of surrounding cells\n  checkAround = (y, x) => {\n    const returnArray = [];\n    for (let a = -1; a < 2; a++) {\n      for (let b = -1; b < 2; b++) {\n        if (!(a === 0 && b === 0) && this.isOnBoard(y + a, x + b)) {\n          returnArray.push(this.boardArray[y + a][x + b]);\n        }\n      }\n    }\n    return returnArray;\n  }\n  // Find the sum of surrounding mines for each cell\n  boardArray = this.boardArray.map((row) => {\n    return row.map(cell => {\n      if (!cell.goBoom) {\n        cell.danger = (this.checkAround(cell.cellY, cell.cellX)).filter(mines => {\n          if (mines.goBoom) { return true; }\n          else { return false; }\n        }).length;\n      } else {\n        cell.danger = 'X';\n      }\n      return cell;\n    });\n  });\n\n  // call back function for tracking number of active unmarked mines in play\n  mineTracker = (change) => {\n    this.setState(prev => {\n      return { mines: prev.mines += change }\n    });\n  }\n\n  render() {\n    return (\n      <Minesweeper.Provider value={{\n        state: this.state,\n        timerControls: {\n          timerStart: this.timerStart,\n          timerStop: this.timerStop\n        },\n        menuButtons: {\n          optionsToggle: this.optionsToggle,\n          controlsToggle: this.controlsToggle\n        },\n        board: this.boardArray,\n        checkAround: this.checkAround,\n        isOnBoard: this.isOnBoard,\n        mineTracker: this.mineTracker\n      }}>\n        {this.props.children}\n      </Minesweeper.Provider>\n    )\n  }\n}\n\nexport const Consumer = Minesweeper.Consumer;","import React from 'react';\nimport './styles/header.css';\nimport {Consumer} from './Context';\n\nconst Header = () => (\n  <header>\n    <h1>MineSweeper</h1>\n    <Consumer>\n      {({menuButtons}) => (\n        <nav>\n          <ul>\n            <li>\n              <button onClick={menuButtons.optionsToggle}>options</button>\n            </li>\n            <li>\n              <button onClick={menuButtons.controlsToggle}>controls</button>\n            </li>\n          </ul>\n        </nav>\n      )}\n    </Consumer>\n  </header>\n);\n\nexport default Header;","import React from 'react';\nimport {Consumer} from './Context';\n\nconst MineTracker = () => (\n  <Consumer>\n    {({state}) => (\n      <div className=\"mine-tracker display\">\n        <p>{state.mines}</p>\n      </div>\n    )}\n  </Consumer>\n);\n\nexport default MineTracker;","import React, {Component} from 'react';\n\nclass Timer extends Component {\n\n  state = {\n    counting: false,\n    elapsed: 0,\n    lastTime: 0\n  }\n\n  componentDidMount(){\n    this.intervalId = setInterval(() => this.ticker(), 100);\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.intervalId);\n  }\n\n  ticker = () => {\n    if (this.state.counting){\n      this.setState(prev => ({\n        elapsed: prev.elapsed + .1\n      }));\n    }\n    if(!this.props.firstTurn){\n      this.turnTimerOn();\n    } else {\n      this.turnTimerOff();\n    }\n  }\n\n  turnTimerOn = () => {\n    this.setState(() => ({\n      counting: true\n    }));\n  }\n  turnTimerOff = () => {\n    this.setState(() => ({\n      counting: false,\n    }));\n  }\n\n  render() {\n    const time = Math.floor(this.state.elapsed);\n    return(\n      <div className=\"timer display\">\n        <p>{time}</p>\n      </div>\n    )\n  } \n}\nexport default Timer;","import React from 'react';\nimport './styles/info-board.css'\nimport MineTracker from './MineTracker';\nimport Timer from './Timer';\nimport {Consumer} from './Context';\n\nconst InfoBoard = () => {\n\n  const resetGame = () => {\n    window.location.reload();\n  }\n\n  return (\n    <section className=\"info-board\">\n      <MineTracker />\n      <div>\n        <button onClick={resetGame}>reset</button>\n      </div>\n      <Consumer>\n        {({state}) => (\n          <Timer firstTurn={state.firstTurn}/>\n        )}\n      </Consumer>\n    </section>\n  )\n}\n\nexport default InfoBoard;","import React from 'react';\n\nconst BoardCell = ({ cell, clicks }) => {\n\n  // Handle MouseUp event for left / right / shift\n  const handleClick = (event) => {\n    event.preventDefault();\n    if (event.shiftKey) { clicks.shiftClick(cell); }\n    else if (event.button === 0 && !cell.clicked && cell.view !== 'F') {\n      clicks.leftClick(cell);\n    }\n    else if (event.button === 2 && (cell.view === 'F' || cell.view === '.')) {\n      clicks.rightClick(cell);\n    }\n  }\n  // MouseDown event with shift to highlight adjacent cells\n  const shiftHighlight = (event) => {\n    event.preventDefault();\n    if (event.shiftKey) { clicks.shiftHighlight(cell); }\n  }\n  // Removes highlight if mouse leaves original target cell\n  const leaveHighlight = (event) => {\n    event.preventDefault();\n    clicks.leaveHighlight(cell);\n  }\n\n  // Add classes to set number colors\n  const cellNumberColor = (cell) => {\n    for (let i = 1; i <= 8; i++) {\n      if (cell.view === i) { return `c${i} cell-button` }\n    }\n    if (cell.view === 0) { return \"no-text black-box cell-button\" }\n    if (cell.view === '.') { return \"no-text cell-button\" }\n    if (cell.view === 'F') { return \"no-text cell-button\" }\n    if (cell.view === 'X') { return \"no-text cell-button\" }\n    if (cell.view === 'L') { return \"no-text cell-button\" }\n  }\n  // Add images to cells based on view state\n  const cellImage = (cell) => {\n    if (cell.view === '.') { return \"https://github.com/scottfalbo/react-minesweeper-v2/blob/main/public/images/spacer.png?raw=true\" }\n    else if (cell.view === 'F') { return \"https://github.com/scottfalbo/react-minesweeper-v2/blob/main/public/images/flag_icon.png?raw=true\" }\n    else if (cell.view === 'X') { return \"https://github.com/scottfalbo/react-minesweeper-v2/blob/main/public/images/bomb.png?raw=true\" }\n    else if (cell.view === 'L') { return \"https://github.com/scottfalbo/react-minesweeper-v2/blob/main/public/images/bomb-X.png?raw=true\" }\n    else { return \"https://github.com/scottfalbo/react-minesweeper-v2/blob/main/public/images/spacer.png?raw=true\" }\n  }\n\n  return (\n    <td>\n      <div className={cell.highlight ? \"highlighted\" : \"\"}></div>\n      <button className={cellNumberColor(cell)}\n        onMouseUp={handleClick}\n        onMouseDown={shiftHighlight}\n        onMouseLeave={leaveHighlight}\n      >\n        <p>{cell.view}</p>\n        <img src={cellImage(cell)} alt=\" \" />\n      </button>\n    </td>\n  );\n}\n\nexport default BoardCell;","import React from 'react';\nimport BoardCell from './BoardCell';\nimport { Consumer } from './Context';\n\nconst BoardRow = (props) => (\n  <Consumer>\n    {({ timerControls, state }) => (\n      <tr>\n        {props.row.map(cell => (\n          <BoardCell\n            cell={cell}\n            clicks={props.clicks}\n            timerControls={timerControls}\n            key={cell.key}\n          />\n        ))}\n      </tr>\n    )}\n  </Consumer>\n);\n\nexport default BoardRow;","import React, { Component } from 'react';\nimport './styles/game-board.css';\nimport BoardRow from './BoardRow';\n\nclass GameBoard extends Component {\n\n  state = {\n    board: this.props.board\n  }\n\n  disableContextMenu = (event) => {\n    event.preventDefault();\n  }\n\n  // Mouse event callbacks for the handlers in BoardCell\n  leftClick = (cell) => {\n    this.props.timerControls.timerStart();\n    let boom = false;\n    let safe = false;\n    cell.view = cell.danger\n    cell.clicked = true;\n    if (cell.danger === 'X') { boom = true; }\n    if (cell.danger === 0) { safe = true; }\n    let board = this.props.board;\n    board[cell.cellY][cell.cellX] = cell;\n    this.setState(() => board);\n    if (boom) { this.kaboom(cell); }\n    if (safe) { this.exposeBlanks(cell, board); }\n    if (!boom) { this.winner = this.checkWin(); }\n  }\n\n  rightClick = (cell) => {\n    cell.view = cell.view === '.' ? 'F' : '.';\n    if (cell.view === 'F') {\n      this.props.mineTracker(-1);\n      cell.clicked = true;\n    }\n    else if (cell.view === '.') {\n      this.props.mineTracker(1);\n      cell.clicked = false;\n    }\n    let board = this.props.board;\n    board[cell.cellY][cell.cellX] = cell;\n    this.setState(() => board);\n  }\n\n  shiftClick = (cell) => {\n    this.leaveHighlight(cell);\n    // get adjacent cells and count total flags\n    let totalFlags = 0;\n    let adjacent = (this.props.checkAround(cell.cellY, cell.cellX));\n    adjacent.forEach(flag => {\n      if (flag.view === 'F') { totalFlags++; }\n    });\n    // expose and handle adjacent cells\n    let board = this.props.board;\n    if (totalFlags >= cell.view) {\n      adjacent.forEach(adj => {\n        if (adj.view !== 'F') {\n          board[adj.cellY][adj.cellX].view = adj.danger;\n          board[adj.cellY][adj.cellX].clicked = true;\n          if (adj.view === 0) { this.exposeBlanks(adj, board); }\n        }\n        if (adj.view === 'X') { this.kaboom(adj); }\n      });\n    }\n    this.setState(() => board);\n    this.winner = this.checkWin();\n  }\n\n  shiftHighlight = (cell) => {\n    let board = this.state.board;\n    let adjacent = (this.props.checkAround(cell.cellY, cell.cellX));\n    adjacent.forEach(adj => {\n      board[adj.cellY][adj.cellX].highlight = true;\n    });\n    this.setState(() => board);\n  }\n\n  leaveHighlight = (cell) => {\n    let board = this.state.board;\n    let adjacent = (this.props.checkAround(cell.cellY, cell.cellX));\n    adjacent.forEach(adj => {\n      board[adj.cellY][adj.cellX].highlight = false;\n    });\n    this.setState(() => board);\n  }\n\n  // Functions to check if a win or loss has occurred\n  lose = false;\n  kaboom = (cell) => {\n    this.lose = true;\n    let board = this.state.board.map(y => (\n      y.map(x => {\n        x.clicked = true;\n        cell.view = 'L';\n        if (x.view !== \"F\") { x.view = x.danger; }\n        return x;\n      })\n    ));\n    this.props.timerControls.timerStop();\n    this.setState(() => board);\n  }\n\n  winner = false;\n  checkWin = () => {\n    let counter = 0;\n    this.state.board.forEach(y => {\n      y.forEach(x => {\n        if (x.view >= 0 && x.view <= 8) { counter++; }\n      })\n    });\n    const specs = this.props.higherState;\n    if ((specs.boardY * specs.boardX) - specs.minesStatic === counter) {\n      this.props.timerControls.timerStop();\n      return true;\n    }\n    else { return false; }\n  }\n\n  // Recursively expose cells adjacent to 0s\n  exposeBlanks = (cell, board) => {\n    let adjacent = this.props.checkAround(cell.cellY, cell.cellX);\n    let checkAgain = [];\n    adjacent.forEach(adj => {\n      board[adj.cellY][adj.cellX].view = adj.danger;\n      if (adj.danger === 0 && !adj.clicked){checkAgain.push(adj);}\n      board[adj.cellY][adj.cellX].clicked = true;\n    });\n    this.setState(() => board);\n    if (checkAgain.length === 0){}\n    else {\n      checkAgain.forEach(recur => {\n        this.exposeBlanks(recur, board);\n      })\n    }\n  }\n\n  render() {\n\n    let reader = '';\n    if (this.winner) { reader = `You made it!!!`; }\n    else if (this.lose) { reader = 'You Exploded!'; }\n    else { reader = '...' }\n\n    return (\n      <section className=\"game-board\">\n        <table className=\"mine-field\"\n          onContextMenu={this.disableContextMenu}>\n          <tbody>\n            {this.state.board.map((x, i) =>\n              <BoardRow\n                row={this.state.board[i]}\n                key={`row${i}`}\n                clicks={{\n                  leftClick: this.leftClick,\n                  rightClick: this.rightClick,\n                  shiftClick: this.shiftClick,\n                  shiftHighlight: this.shiftHighlight,\n                  leaveHighlight: this.leaveHighlight\n                }}\n              />\n            )}\n          </tbody>\n        </table>\n        <div className=\"reader-board\">\n          <p>{reader}</p>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default GameBoard;","import React, {Component} from 'react';\nimport './styles/options.css';\n\nclass Options extends Component {\n\n  difficulty = localStorage.getItem('difficulty') ? localStorage.getItem('difficulty') : 'beginner';\n\n  state = {\n    difficulty: this.difficulty\n  }\n\n  handleSubmit = () => {\n    let specs = [];\n    if (this.state.difficulty === 'beginner'){specs = [9,9,10];}\n    else if (this.state.difficulty === 'intermediate'){specs = [16,16,40];}\n    else if (this.state.difficulty === 'expert'){specs = [16,30,99];}\n    else {specs = [9,9,10];}\n    localStorage.setItem('specs', specs);\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      difficulty: event.target.value\n    });\n  }\n\n  render(){\n    return(\n      <section>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"radio\">\n            <label>\n              <input \n                type=\"radio\"\n                value=\"beginner\"\n                checked={this.state.difficulty === \"beginner\"}\n                onChange={this.handleChange}\n              />\n              Beginner\n            </label>\n          </div>\n          <div className=\"radio\">\n            <label>\n              <input \n                type=\"radio\"\n                value=\"intermediate\"\n                checked={this.state.difficulty === \"intermediate\"}\n                onChange={this.handleChange}\n              />\n              Intermediate\n            </label>\n          </div>\n          <div className=\"radio\">\n            <label>\n              <input \n                type=\"radio\"\n                value=\"expert\"\n                checked={this.state.difficulty === \"expert\"}\n                onChange={this.handleChange}\n              />\n              Expert\n            </label>\n          </div>\n          <button type=\"submit\">\n            start new game\n          </button>\n        </form>\n        <button onClick={this.props.menuButtons.optionsToggle} className=\"close-window\">\n          ✖\n        </button>\n      </section>\n    )\n  }\n}\n\nexport default Options;","import React from 'react';\nimport './styles/control.css';\n\nconst Controls = (props) => (\n  <section>\n    <h1>Controls</h1>\n    <article>\n      <p><span>Left Click:</span> an empty square to reveal it.</p>\n      <p><span>Right Click:</span> an empty square to flag, or unflag it.</p>\n      <p><span>Shift Click:</span> a number to reveal it's adjacent squares. This only works if there are adjacent flags equal to the number.</p>\n    </article>\n    <button onClick={props.menuButtons.controlsToggle} className=\"close-window\">\n      ✖\n      </button>\n  </section>\n);\n\nexport default Controls;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport InfoBoard from './components/InfoBoard'\nimport GameBoard from './components/GameBoard'\nimport Options from './components/Options'\nimport Controls from './components/Controls'\nimport { Consumer } from './components/Context'\n\nconst App = () => (\n  <Consumer>\n    {({ board, timerControls, mineTracker, checkAround, state, menuButtons }) => (\n      <div className=\"app\">\n        <section className=\"game-box\">\n          <Header />\n          <InfoBoard />\n          <GameBoard\n            board={board}\n            timerControls={timerControls}\n            mineTracker={mineTracker}\n            checkAround={checkAround}\n            higherState={state}\n          />\n          <div className={state.optionsSwitch ? \"toggle-box options show-me\" : \"toggle-box options hide-me\"}>\n            <Options menuButtons={menuButtons} />\n          </div>\n          <div className={state.controlsSwitch ? \"toggle-box controls show-me\" : \"toggle-box controls hide-me\"}>\n            <Controls menuButtons={menuButtons} />\n          </div>\n        </section>\n      </div>\n    )}\n  </Consumer>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport {Provider} from './components/Context';\n\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}